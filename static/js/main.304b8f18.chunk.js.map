{"version":3,"sources":["components/LineChart/LineChart.js","components/ChartBox/ChartBox.jsx","components/Year/Year.jsx","components/Selection/Selection.jsx","components/SubSelection/SubSelection.jsx","store/actions/actionTypes.js","store/reducers/data.js","store/reducers/index.js","store.js","store/actions/data.js","containers/SidePanel/SidePanel.jsx","components/ThemeSwitch/ThemeSwitch.jsx","components/Title/Title.jsx","containers/Dashboard/Dashboard.jsx","reportWebVitals.js","index.jsx"],"names":["LineChart","data","dimensions","svgRef","width","height","parseDate","d3","xScale","domain","items","d","date","range","min","value","max","yScale","svgEl","current","selectAll","remove","svg","append","attr","xAxis","tickSize","tickFormat","xAxisGroup","call","select","yAxis","val","yAxisGroup","line","x","y","propTypes","PropTypes","shape","color","string","isRequired","name","arrayOf","number","margin","top","right","bottom","left","instanceOf","Element","ChartBox","React","useRef","useState","window","innerWidth","setWidth","innerHeight","setHeight","useEffect","handleResize","addEventListener","removeEventListener","className","ref","Selection","props","year","yearList","changeYear","itemList","map","Dropdown","Item","onClick","Toggle","id","Menu","selection","dispatchSelection","SidePanel","totals","subItem","dispatch","subItemList","Object","keys","forEach","key","push","ListGroup","action","active","ISLOADING","DATE","LOADDATA","SETSUBITEM","SETSELECTION","SETYEARLIST","initialState","isLoading","departmentList","departmentTotals","cabinetList","cabinetTotals","fundCategoryList","fundCategoryTotals","fundList","fundTotals","workingDataSet","totalAmount","dataReducer","state","type","actions","department_list","total_amount","grand_totals","cabinet_list","fund_list","fund_category_list","department","cabinet","fund_category","fund","combineReducers","middleware","thunk","store","createStore","rootReducer","composeWithDevTools","applyMiddleware","LoadData","getState","axios","get","then","result","JSON","parse","atob","content","catch","error","console","log","show","setShow","useSelector","currentYear","useDispatch","Button","Collapse","in","dimension","Stack","gap","Year","s","SetSelection","SetSubItem","ThemeSwitch","theme","setTheme","size","variant","document","documentElement","style","setProperty","charAt","toUpperCase","slice","Title","Row","Col","xs","Dashboard","dataSet","element","replace","chartData","index","day","total","Container","fluid","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.304b8f18.chunk.js","sourcesContent":["import PropTypes from 'prop-types';\n\nimport * as d3 from 'd3';\n\nconst LineChart = ({ data, dimensions, svgRef }) => {\n    const { width, height } = dimensions;\n    const parseDate = d3.timeParse('%Y-%m-%d');\n    const xScale = d3.scaleTime()\n        .domain(d3.extent(data.items, (d) => parseDate(d.date)))\n        .range([0, width]);\n\n    const min = d3.min(data.items, (d) => d.value);\n    const max = d3.max(data.items, (d) => d.value);\n    const yScale = d3.scaleLinear()\n        .domain([\n            min < 0 ? min * 1.25 : min * 0.75,\n            max < 0 ? max * 0.75 : max * 1.1,\n        ])\n        .range([height - 50, 0]);\n\n    // Create root container where we will append all other chart elements\n    const svgEl = d3.select(svgRef.current);\n    svgEl.selectAll('*').remove(); // Clear svg content before adding new elements\n    const svg = svgEl\n        .append('g')\n        .attr('transform', `translate(100,20)`);\n\n    // Add X grid lines with labels\n    const xAxis = d3.axisBottom(xScale)\n        .tickSize(-height)\n        .tickFormat(d3.timeFormat('%B'));\n    const xAxisGroup = svg.append('g')\n        .attr('transform', `translate(0, ${height})`)\n        .call(xAxis);\n    xAxisGroup.select('.domain').remove();\n    xAxisGroup.selectAll('line').attr('stroke', 'var(--alt-color)');\n    xAxisGroup.selectAll('text')\n        .attr('transform', 'rotate(-45)')\n        .attr('color', 'var(--text-color)')\n        .attr('font-size', '0.75rem');\n\n    // Add Y grid lines with labels\n    const yAxis = d3.axisLeft(yScale)\n        .tickSize(-width)\n        .tickFormat((val) => val);\n    const yAxisGroup = svg.append('g').call(yAxis);\n    yAxisGroup.select('.domain').remove();\n    yAxisGroup.selectAll('line').attr('stroke', 'var(--alt-color)');\n    yAxisGroup.selectAll('text')\n        .attr('color', 'var(--text-color)')\n        .attr('font-size', '0.75rem');\n\n    // Draw the line\n    const line = d3.line()\n        .x((d) => xScale(parseDate(d.date)))\n        .y((d) => yScale(d.value));\n\n    svg.append('path')\n        .attr('d', line(data.items))\n        .attr('stroke', 'var(--line-color)')\n        .attr('stroke-width', 2)\n        .attr('fill', 'none')\n        .attr('class', 'line');\n};\n\nLineChart.propTypes = {\n    data: PropTypes.shape({\n        color: PropTypes.string.isRequired,\n        name: PropTypes.string.isRequired,\n        items: PropTypes.arrayOf(\n            PropTypes.shape({\n                date: PropTypes.string.isRequired,\n                value: PropTypes.number.isRequired,\n            }),\n        ).isRequired,\n    }).isRequired,\n    dimensions:\n        PropTypes.shape({\n            width: PropTypes.number.isRequired,\n            height: PropTypes.number.isRequired,\n            margin: PropTypes.shape({\n                top: PropTypes.number.isRequired,\n                right: PropTypes.number.isRequired,\n                bottom: PropTypes.number.isRequired,\n                left: PropTypes.number.isRequired,\n            }),\n        }).isRequired,\n    svgRef: PropTypes.shape({ current: PropTypes.instanceOf(Element) }).isRequired,\n};\n\nexport default LineChart;\n","import React, { useState, useEffect } from 'react';\nimport PropTypes from 'prop-types';\n\nimport LineChart from '../LineChart/LineChart';\nimport './ChartBox.css';\n\n/**\n *  ChartBox is a React wrapper for LineChart.\n * @param {object} data\n * @param {object} dimensions\n * @returns <svg>\n */\nconst ChartBox = ({ data }) => {\n    const svgRef = React.useRef(null);\n\n    /**\n     * The width of the chart\n     * @constant\n     * @type {state}\n     */\n    const [width, setWidth] = useState(window.innerWidth * 0.8);\n\n    /**\n     * The height of the chart\n     * @constant\n     * @type {state}\n     */\n    const [height, setHeight] = useState(window.innerHeight * 0.75);\n\n    // Resize the chart on window resize\n    useEffect(() => {\n        const handleResize = () => {\n            setWidth(window.innerWidth * 0.75);\n            setHeight(window.innerHeight * 0.75);\n        };\n        window.addEventListener('resize', handleResize);\n        return () => window.removeEventListener('resize', handleResize);\n    }, []);\n\n    const dimensions = { width, height };\n    useEffect(() => {\n        LineChart({ data, dimensions, svgRef });\n    }, [data, dimensions, svgRef]);\n\n    return <svg className='Chart' ref={svgRef} width={width + 120} height={height * 1.1} />;\n};\n\nChartBox.propTypes = {\n    data: PropTypes.shape({\n        name: PropTypes.string.isRequired,\n        items: PropTypes.arrayOf(\n            PropTypes.shape({\n                date: PropTypes.string.isRequired,\n                value: PropTypes.number.isRequired,\n            }),\n        ).isRequired,\n    }).isRequired,\n};\n\nexport default ChartBox;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport Dropdown from 'react-bootstrap/Dropdown';\n\nimport '../Dropdown.css';\n\nconst Selection = (props) => {\n    const { year, yearList, changeYear } = props;\n\n    const itemList = yearList.map((y) => (\n        <Dropdown.Item\n            className='dropdown-item'\n            onClick={() => changeYear(y)}\n            key={`year-${y}`}\n        >\n            {y}\n        </Dropdown.Item>\n    ));\n\n    return (\n        <Dropdown>\n            <Dropdown.Toggle className='dropdown-trigger' id='dropdown-basic'>\n                {year}\n            </Dropdown.Toggle>\n            <Dropdown.Menu className='dropdown-background'>\n                {itemList}\n            </Dropdown.Menu>\n        </Dropdown>\n    );\n};\n\nSelection.propTypes = {\n    year: PropTypes.string.isRequired,\n    yearList: PropTypes.arrayOf(PropTypes.string).isRequired,\n    changeYear: PropTypes.func.isRequired,\n};\n\nexport default Selection;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport Dropdown from 'react-bootstrap/Dropdown';\n\nimport '../Dropdown.css';\n\n/**\n * A dropdown menu for selecting what dataset to view\n * @component\n * @requires react\n * @requires react-bootstrap\n * @returns {JSX}\n */\nconst Selection = (props) => {\n    /**\n     * The type of data the user is looking at ex. cabinet, department, fund category or fund\n     * @constant\n     * @type {string}\n     */\n    const { selection, dispatchSelection } = props;\n\n    return (\n        <Dropdown>\n            <Dropdown.Toggle className='dropdown-trigger' id='dropdown-basic'>\n                {selection}\n            </Dropdown.Toggle>\n            <Dropdown.Menu className='dropdown-background'>\n                <Dropdown.Item className='dropdown-item' onClick={() => dispatchSelection('department')}>\n                    Department\n                </Dropdown.Item>\n                <Dropdown.Item className='dropdown-item' onClick={() => dispatchSelection('cabinet')}>\n                    Cabinet\n                </Dropdown.Item>\n                <Dropdown.Item className='dropdown-item' onClick={() => dispatchSelection('fund_category')}>\n                    Fund Category\n                </Dropdown.Item>\n                <Dropdown.Item className='dropdown-item' onClick={() => dispatchSelection('fund')}>\n                    Fund\n                </Dropdown.Item>\n            </Dropdown.Menu>\n        </Dropdown>\n    );\n};\n\nSelection.propTypes = {\n    selection: PropTypes.string.isRequired,\n    dispatchSelection: PropTypes.func.isRequired,\n};\n\nexport default Selection;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport ListGroup from 'react-bootstrap/ListGroup';\n\nimport './SubSelection.css';\n\nconst SidePanel = (props) => {\n    const { totals, subItem, dispatch } = props;\n\n    /**\n     * The sub items the chart can display\n     * @constant\n     * @type {list}\n     */\n    const subItemList = [];\n    Object.keys(totals).forEach((key) => {\n        subItemList.push(\n            <ListGroup.Item\n                key={key}\n                action\n                active={subItem === key}\n                onClick={() => dispatch(key)}\n            >\n                {key}\n            </ListGroup.Item>,\n        );\n    });\n\n    return (\n        <ListGroup className='List'>{subItemList}</ListGroup>\n    );\n};\n\nSidePanel.propTypes = {\n    totals: PropTypes.objectOf(PropTypes.number).isRequired,\n    subItem: PropTypes.string.isRequired,\n    dispatch: PropTypes.func.isRequired,\n};\n\nexport default SidePanel;\n","// Data\nexport const ISLOADING = 'ISLOADING';\nexport const DATE = 'DATE';\nexport const LOADDATA = 'LOADDATA';\nexport const SETSUBITEM = 'SETSUBITEM';\nexport const SETSELECTION = 'SETSELECTION';\nexport const SETYEARLIST = 'SETYEARLIST';\n","/* eslint-disable camelcase */\n/* eslint-disable no-case-declarations */\nimport * as actions from '../actions/actionTypes';\n\n/**\n * Initial state of the app\n * @prop {bool} isLoading: Is the loading data or not\n * @prop {string} year: The year the user wants to see\n * @prop {array} yearList: a list of years available\n * @prop {object} departmentList: The list of departments and their money spent per month\n * @prop {object} departmentTotals: The list of departments and total money spent per year\n * @prop {object} cabinetList: The list of cabinets and their money spent per month\n * @prop {object} cabinetTotals: The list of cabinets and total money spent per year\n * @prop {object} fundCategoryList: The list of fund categories and their money spent per month\n * @prop {object} fundCategoryTotals: The list of fund categories and total money spent per year\n * @prop {object} fundList: The list of fund and their money spent per month\n * @prop {object} fundTotals: The list of fund and total money spent per year\n * @prop {string} selection: The category selection the user is viewing\n * @prop {string} subItem: The sub item the user wants to load into the line chart\n * @prop {object} workingDataSet: the current dataset being viewed\n * @prop {object} totals: The monthly totals for the data set currently being used\n * @prop {string} totalAmount: The total amount the colorado gov has spent\n */\nconst initialState = {\n    isLoading: true,\n    year: '2020', // new Date().getFullYear(), temp hack until I run this years data\n    yearList: [],\n    departmentList: {},\n    departmentTotals: {},\n    cabinetList: {},\n    cabinetTotals: {},\n    fundCategoryList: {},\n    fundCategoryTotals: {},\n    fundList: {},\n    fundTotals: {},\n    selection: 'department',\n    subItem: 'total',\n    workingDataSet: null,\n    totals: null,\n    totalAmount: 0.0,\n};\n\n/**\n * Dispatches the needed action.\n * @param {object} state The current app state.\n * @param {action} action The action the app needs to dispatch.\n */\nconst dataReducer = (state = initialState, action) => {\n    switch (action.type) {\n    case actions.ISLOADING:\n        return {\n            ...state,\n            isLoading: !action.isLoading,\n        };\n\n    case actions.DATE:\n        return {\n            ...state,\n            subItem: 'total',\n            year: action.data.year,\n        };\n\n    case actions.SETYEARLIST:\n        return {\n            ...state,\n            yearList: action.data.yearList,\n        };\n\n    case actions.LOADDATA:\n        const {\n            department_list, total_amount, grand_totals, cabinet_list, fund_list,\n            fund_category_list,\n        } = action.data;\n\n        return {\n            ...state,\n            totalAmount: total_amount,\n            departmentList: department_list,\n            departmentTotals: grand_totals.department,\n            cabinetList: cabinet_list,\n            cabinetTotals: grand_totals.cabinet,\n            fundCategoryList: fund_category_list,\n            fundCategoryTotals: grand_totals.fund_category,\n            fundList: fund_list,\n            fundTotals: grand_totals.fund,\n            isLoading: action.data.isLoading,\n            workingDataSet: department_list,\n            totals: grand_totals.department,\n        };\n\n    case actions.SETSUBITEM:\n        return {\n            ...state,\n            subItem: action.data.subItem,\n        };\n\n    case actions.SETSELECTION:\n        let workingDataSet = null;\n        let totals = null;\n\n        switch (action.data.selection) {\n        case 'department':\n            workingDataSet = state.departmentList;\n            totals = state.departmentTotals;\n            break;\n        case 'cabinet':\n            workingDataSet = state.cabinetList;\n            totals = state.cabinetTotals;\n            break;\n        case 'fund_category':\n            workingDataSet = state.fundCategoryList;\n            totals = state.fundCategoryTotals;\n            break;\n        case 'fund':\n            workingDataSet = state.fundList;\n            totals = state.fundTotals;\n            break;\n        default:\n            workingDataSet = state.departmentList;\n            totals = state.departmentTotals;\n        }\n        return {\n            ...state,\n            selection: action.data.selection,\n            subItem: 'total',\n            workingDataSet,\n            totals,\n        };\n\n    default:\n        return state;\n    }\n};\n\nexport default dataReducer;\n","import { combineReducers } from 'redux';\n\nimport data from './data';\n\nexport default combineReducers({ data });\n","import { createStore, applyMiddleware } from 'redux';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport thunk from 'redux-thunk';\n\nimport rootReducer from './store/reducers';\n\nconst middleware = [thunk];\nconst store = createStore(rootReducer, composeWithDevTools(applyMiddleware(...middleware)));\n\nexport default store;\n","import axios from 'axios';\nimport store from '../../store';\n\nimport * as actions from './actionTypes';\n\nconst LoadData = () => (dispatch) => {\n    const { year } = store.getState().data;\n\n    axios.get(`https://api.github.com/repos/David-Duefrene/Daves-Datasets/contents/Colorado-Budget/data/${year}.json`)\n        .then((result) => {\n            dispatch({\n                type: actions.LOADDATA,\n                data: {\n                    isLoading: false,\n                    ...JSON.parse(atob(result.data.content)),\n                },\n            });\n        }).catch((error) => {\n            console.log(error);\n        });\n};\n\nexport const SetSubItem = (subItem) => (dispatch) => {\n    dispatch({\n        type: actions.SETSUBITEM,\n        data: { subItem },\n    });\n};\n\nexport const SetSelection = (selection) => (dispatch) => {\n    dispatch({\n        type: actions.SETSELECTION,\n        data: { selection },\n    });\n};\n\nexport const SetYear = (year) => (dispatch) => {\n    dispatch({\n        type: actions.DATE,\n        data: { year },\n    });\n};\n\nexport const SetLoading = (isLoading) => (dispatch) => {\n    dispatch({\n        type: actions.ISLOADING,\n        data: { isLoading },\n    });\n};\n\nexport const SetYearList = () => (dispatch) => {\n    axios.get(`https://api.github.com/repos/David-Duefrene/Daves-Datasets/contents/Colorado-Budget/data/`)\n        .then((result) => {\n            dispatch({\n                type: actions.SETYEARLIST,\n                data: {\n                    yearList: result.data.map((element) => element.name.replace('.json', '')),\n                },\n            });\n        }).catch((error) => {\n            console.log(error);\n        });\n};\n\nexport default LoadData;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { useSelector, useDispatch } from 'react-redux';\n\nimport Stack from 'react-bootstrap/Stack';\nimport Button from 'react-bootstrap/Button';\nimport Collapse from 'react-bootstrap/Collapse';\n\nimport Year from '../../components/Year/Year';\nimport Selection from '../../components/Selection/Selection';\nimport SubSelection from '../../components/SubSelection/SubSelection';\nimport LoadData, {\n    SetSelection, SetSubItem, SetYear, SetLoading,\n} from '../../store/actions/data';\n\nimport './SidePanel.css';\n\nconst SidePanel = ({ show, setShow }) => {\n    /**\n     * The type of data the user is looking at ex. cabinet, department, fund category or fund\n     * @constant\n     * @type {string}\n     */\n    const selection = useSelector((state) => state.data.selection);\n\n    /**\n     * The type of sub data the user is looking at ex. the individual cabinet, department,\n     * fund category or fund\n     * @constant\n     * @type {string}\n     */\n    const subItem = useSelector((state) => state.data.subItem);\n\n    /**\n     * The totals of the selection the user is looking at\n     * @constant\n     * @type {string}\n     */\n    const totals = useSelector((state) => state.data.totals);\n\n    /**\n     * The current year the user is looking at\n     * @constant\n     * @type {string}\n     * @default '2020'\n     */\n    const currentYear = useSelector((state) => state.data.year);\n\n    /**\n     * The list of years the user can look at\n     * @constant\n     * @type {list}\n     */\n    const yearList = useSelector((state) => state.data.yearList);\n\n    /**\n     * The dispatch function to update the store\n     * @constant\n     * @type {function}\n     */\n    const dispatch = useDispatch();\n\n    /**\n     * Dispatches the data selection the user wants to view\n     * @constant\n     * @type {function}\n     * @param {string} selection - The type of data the user is looking at ex. cabinet, department,\n     *      fund_category or fund\n     * @returns {void}\n     */\n    const dispatchSelection = (s) => dispatch(SetSelection(s));\n    /**\n     * Dispatches the data Sub selection the user wants to view\n     * @constant\n     * @type {function}\n     * @param {string} selection - The type of data the user is looking at ex. cabinet, department,\n     *      fund_category or fund\n     * @returns {void}\n     */\n    const dispatchSubSelection = (key) => dispatch(SetSubItem(key));\n\n    return (\n        <div className='SidePanel d-grid gap-2'>\n            <Button\n                className='SidePanel-button'\n                onClick={() => setShow(!show)}\n                aria-controls='SidePanelID'\n            >\n                {show ? '<' : '>'}\n            </Button>\n            <Collapse in={show} dimension='width'>\n                <div>\n                    <div id='SidePanelID'>\n                        <Stack gap={1} className='Stack'>\n                            <Year\n                                year={currentYear}\n                                yearList={yearList}\n                                changeYear={(y) => {\n                                    dispatch(SetLoading());\n                                    dispatch(SetYear(y));\n                                    dispatch(LoadData());\n                                }}\n                            />\n                            <Selection\n                                selection={selection}\n                                dispatchSelection={dispatchSelection}\n                            />\n                            <SubSelection\n                                totals={totals}\n                                subItem={subItem}\n                                dispatch={dispatchSubSelection}\n                            />\n                        </Stack>\n                    </div>\n                </div>\n            </Collapse>\n        </div>\n    );\n};\n\nSidePanel.propTypes = {\n    show: PropTypes.bool.isRequired,\n    setShow: PropTypes.func.isRequired,\n};\n\nexport default SidePanel;\n","import React, { useState } from 'react';\n\nimport Button from 'react-bootstrap/Button';\n\nimport './ThemeSwitch.css';\n\n/**\n * Button to switch between the light and dark mode\n * @component\n * @requires react\n * @returns {JSX}\n */\nconst ThemeSwitch = () => {\n    /**\n     * The current theme\n     * @constant\n     * @type {string}\n     */\n    const [theme, setTheme] = useState('dark');\n\n    /**\n     * The function to switch between the light and dark theme\n     * @constant\n     * @type {function}\n     */\n    const switchTheme = () => {\n        if (theme === 'dark') {\n            document.documentElement.style.setProperty('--main-color', 'hsl(0, 0%, 90%)');\n            document.documentElement.style.setProperty('--text-color', 'hsl(0, 0%, 0%)');\n            document.documentElement.style.setProperty('--line-color', 'hsl(265, 100%, 47%)');\n            document.documentElement.style.setProperty('--alt-color', 'hsla(258, 100%, 35%, 0.5)');\n            setTheme('light');\n            return;\n        }\n        document.documentElement.style.setProperty('--main-color', 'hsl(0, 0%, 13%)');\n        document.documentElement.style.setProperty('--text-color', 'hsl(0, 0%, 100%)');\n        document.documentElement.style.setProperty('--line-color', 'hsl(267, 95%, 76%)');\n        document.documentElement.style.setProperty('--alt-color', 'hsl(0, 27%, 94%)');\n        setTheme('dark');\n    };\n\n    return (\n        <div className='theme-switch d-grid'>\n            <Button\n                size='sm'\n                variant={theme}\n                onClick={switchTheme}\n            >\n                {`${theme.charAt(0).toUpperCase() + theme.slice(1)} Mode`}\n            </Button>\n        </div>\n    );\n};\n\nexport default ThemeSwitch;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport Col from 'react-bootstrap/Col';\nimport Row from 'react-bootstrap/Row';\n\nimport ThemeSwitch from '../ThemeSwitch/ThemeSwitch';\n\nimport './Title.css';\n\n/**\n * Renders the title section including the year, ThemeSwitch and an app description\n * @component\n * @requires react\n * @requires react-bootstrap\n * @prop {string} year - The current year being viewed\n * @returns {JSX}\n */\nconst Title = (props) => {\n    const { year } = props;\n    const description = `Colorado budget is app that displays the yearly budgets of all of Colorado's Departments, Cabinets, Funds and Fund Categories.`;\n\n    return (\n        <Row>\n            <Col xs='2'><ThemeSwitch /></Col>\n            <Col>\n                <p>{description}</p>\n                <h3>{`Current year being viewed: ${year}`}</h3>\n            </Col>\n        </Row>\n    );\n};\n\nTitle.propTypes = {\n    year: PropTypes.string.isRequired,\n};\n\nexport default Title;\n","import React, { useState, useEffect } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\n\nimport Container from 'react-bootstrap/Container';\nimport Col from 'react-bootstrap/Col';\nimport Row from 'react-bootstrap/Row';\n\nimport ChartBox from '../../components/ChartBox/ChartBox';\nimport SidePanel from '../SidePanel/SidePanel';\nimport Title from '../../components/Title/Title';\n\nimport LoadData, { SetYearList } from '../../store/actions/data';\n\nimport './Dashboard.css';\n\n/**\n * Renders the main dashboard\n * @component\n * @requires react\n * @returns {JSX}\n */\nconst Dashboard = () => {\n    /**\n     * If the side panel is open or not\n     * @constant\n     * @type {state}\n     */\n    const [show, setShow] = useState(false);\n    /**\n     * The current year being viewed\n     * @constant\n     * @type {{Object {name: string, amount: float}}}\n     */\n    const year = useSelector((state) => state.data.year);\n    /**\n     * The current data set being viewed\n     * @constant\n     * @type {{Object {name: string, amount: float}}}\n     */\n    const dataSet = useSelector((state) => state.data.workingDataSet);\n    /**\n     * The specific cabinet, department, fund category or fund the user is looking at\n     * @constant\n     * @type {string}\n     */\n    const subItem = useSelector((state) => state.data.subItem);\n    /**\n     * If the app is loading or not\n     * @constant\n     * @type {bool}\n     */\n    const isLoading = useSelector((state) => state.data.isLoading);\n\n    /**\n     * The dispatch\n     * @constant\n     * @type {function}\n     */\n    const dispatch = useDispatch();\n\n    // Initial Data load\n    useEffect(() => {\n        dispatch(LoadData());\n        dispatch(SetYearList());\n    }, []);\n\n    if (isLoading) { return <h1>Loading!!!</h1>; }\n\n    /**\n     * The data the chart is displaying\n     * @constant\n     * @type {list}\n     */\n    const chartData = [];\n    for (let index = 0; index < 12; index++) {\n        // Pads 0 if less than 10, ex. 01, 02, 03\n        const day = index < 9 ? `0${index + 1}` : index + 1;\n        if (subItem === '') {\n            chartData.push({\n                value: dataSet[index + 1].total,\n                date: `2020-${day}-01`,\n            });\n        } else {\n            chartData.push({\n                value: dataSet[index + 1][subItem],\n                date: `2020-${day}-01`,\n            });\n        }\n    }\n\n    return (\n        <div>\n            <Container fluid className='Main'>\n                <Row xs='auto'>\n                    <Col className='SmoothTransition' xs={show ? 2 : 1}>\n                        <SidePanel show={show} setShow={setShow} />\n                    </Col>\n                    <Col xs={show ? 9 : 10}>\n                        <Title year={year} />\n                        <ChartBox data={{ name: year, items: chartData }} />\n                    </Col>\n                </Row>\n            </Container>\n        </div>\n    );\n};\n\nexport default Dashboard;\n","const reportWebVitals = (onPerfEntry) => {\n    if (onPerfEntry && onPerfEntry instanceof Function) {\n        import('web-vitals').then(({\n            getCLS, getFID, getFCP, getLCP, getTTFB,\n        }) => {\n            getCLS(onPerfEntry);\n            getFID(onPerfEntry);\n            getFCP(onPerfEntry);\n            getLCP(onPerfEntry);\n            getTTFB(onPerfEntry);\n        });\n    }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\n\nimport Dashboard from './containers/Dashboard/Dashboard';\nimport reportWebVitals from './reportWebVitals';\nimport store from './store';\n\nimport './index.css';\n\nReactDOM.render(\n    <React.StrictMode>\n        <Provider store={store}><Dashboard /></Provider>\n    </React.StrictMode>,\n    document.getElementById('root'),\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals(console.log);\n"],"sourceRoot":""}