{"version":3,"sources":["components/LineChart/LineChart.jsx","store/actions/actionTypes.js","store/actions/data.js","containers/Dashboard/Dashboard.jsx","App.jsx","reportWebVitals.js","store/reducers/data.js","store/reducers/index.js","store.js","index.jsx"],"names":["LineChart","data","dimensions","undefined","d3","svgRef","React","useRef","width","height","margin","svgWidth","left","right","svgHeight","top","bottom","useEffect","parseDate","xScale","domain","items","d","date","range","yScale","value","svgEl","current","selectAll","remove","svg","append","attr","xAxis","tickSize","tickFormat","xAxisGroup","call","select","yAxis","val","yAxisGroup","line","x","y","ref","ISLOADING","DATE","LOADDATA","SETSUBITEM","SETSELECTION","SetSelection","selection","dispatch","type","actions","LoadData","isLoading","testData","Dashboard","dataSet","useSelector","state","workingDataSet","totals","subItem","useState","window","innerWidth","chartWidth","setChartWidth","innerHeight","chartHeight","setChartHeight","show","setShow","useDispatch","handleResize","addEventListener","removeEventListener","color","Math","floor","random","toString","chartData","index","day","push","total","subItemList","Object","keys","forEach","key","ListGroup","Item","action","active","onClick","SetSubItem","sidePanel","id","Stack","gap","className","Dropdown","Toggle","variant","Menu","Container","fluid","Col","Button","bsPrefix","Collapse","in","dimension","md","name","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","initialState","fiscalYear","DateTime","now","minus","years","toFormat","departmentList","departmentTotals","cabinetList","cabinetTotals","fundCategoryList","fundCategoryTotals","fundList","fundTotals","totalAmount","dataReducer","department_list","total_amount","grand_totals","cabinet_list","fund_list","fund_category_list","department","cabinet","fund_category","fund","combineReducers","middleware","thunk","store","createStore","rootReducer","composeWithDevTools","applyMiddleware","ReactDOM","render","StrictMode","document","getElementById","console","log"],"mappings":"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","file":"static/js/main.7877f97d.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport * as d3 from 'd3';\n\n// TODO - make this not a JSX component\nconst LineChart = ({ data, dimensions }) => {\n    // TEMP - this is a hack to get testing to work, see above TODO\n    if (d3.timeParse === undefined) { return <h1>Test</h1>; }\n\n    const svgRef = React.useRef(null);\n    const { width, height, margin } = dimensions;\n    const svgWidth = width + margin.left + margin.right;\n    const svgHeight = height + margin.top + margin.bottom;\n\n    React.useEffect(() => {\n        const parseDate = d3.timeParse('%Y-%m-%d');\n        const xScale = d3.scaleTime()\n            .domain(d3.extent(data.items, (d) => parseDate(d.date)))\n            .range([0, width]);\n\n        const yScale = d3.scaleLinear()\n            .domain([\n                d3.min(data.items, (d) => d.value) * 1.1,\n                d3.max(data.items, (d) => d.value) * 1.1,\n            ])\n            .range([height, 0]);\n\n        // Create root container where we will append all other chart elements\n        const svgEl = d3.select(svgRef.current);\n        svgEl.selectAll('*').remove(); // Clear svg content before adding new elements\n        const svg = svgEl\n            .append('g')\n            .attr('transform', `translate(${margin.left},${margin.top})`);\n\n        // Add X grid lines with labels\n        const xAxis = d3.axisBottom(xScale)\n            .tickSize(-height + margin.bottom)\n            .tickFormat(d3.timeFormat('%B'));\n        const xAxisGroup = svg.append('g')\n            .attr('transform', `translate(0, ${height - margin.bottom})`)\n            .call(xAxis);\n        xAxisGroup.select('.domain').remove();\n        xAxisGroup.selectAll('line').attr('stroke', 'rgba(255, 255, 255, 0.2)');\n        xAxisGroup.selectAll('text')\n            .attr('transform', 'rotate(-45)')\n            .attr('opacity', 0.5)\n            .attr('color', 'pink')\n            .attr('font-size', '0.75rem');\n\n        // Add Y grid lines with labels\n        const yAxis = d3.axisLeft(yScale)\n            .tickSize(-width)\n            .tickFormat((val) => val);\n        const yAxisGroup = svg.append('g').call(yAxis);\n        yAxisGroup.select('.domain').remove();\n        yAxisGroup.selectAll('line').attr('stroke', 'rgba(255, 255, 255, 0.2)');\n        yAxisGroup.selectAll('text')\n            .attr('opacity', 0.5)\n            .attr('color', 'white')\n            .attr('font-size', '0.75rem');\n\n        // Draw the lines\n        const line = d3.line()\n            .x((d) => xScale(parseDate(d.date)))\n            .y((d) => yScale(d.value));\n\n        svg.append('path')\n            .attr('d', line(data.items))\n            .attr('stroke', 'white')\n            .attr('stroke-width', 2)\n            .attr('fill', 'none')\n            .attr('class', 'line');\n    }, [data]); // Redraw chart if data changes\n\n    return <svg ref={svgRef} width={svgWidth} height={svgHeight + 10} />;\n};\n\nLineChart.propTypes = {\n    data: PropTypes.shape({\n        color: PropTypes.string.isRequired,\n        name: PropTypes.string.isRequired,\n        items: PropTypes.arrayOf(\n            PropTypes.shape({\n                date: PropTypes.string.isRequired,\n                value: PropTypes.number.isRequired,\n            }),\n        ).isRequired,\n    }).isRequired,\n    dimensions:\n        PropTypes.shape({\n            width: PropTypes.number.isRequired,\n            height: PropTypes.number.isRequired,\n            margin: PropTypes.shape({\n                top: PropTypes.number.isRequired,\n                right: PropTypes.number.isRequired,\n                bottom: PropTypes.number.isRequired,\n                left: PropTypes.number.isRequired,\n            }),\n        }).isRequired,\n};\n\nexport default LineChart;\n","// Data\nexport const ISLOADING = 'ISLOADING';\nexport const DATE = 'DATE';\nexport const LOADDATA = 'LOADDATA';\nexport const SETSUBITEM = 'SETSUBITEM';\nexport const SETSELECTION = 'SETSELECTION';\n","// import axios from 'axios';\n\nimport testData from './2020.json';\nimport * as actions from './actionTypes';\n\nconst LoadData = () => (dispatch) => {\n    dispatch({\n        type: actions.LOADDATA,\n        data: {\n            isLoading: false,\n            ...testData,\n        },\n    });\n};\n\nexport const SetSubItem = (subItem) => (dispatch) => {\n    dispatch({\n        type: actions.SETSUBITEM,\n        data: { subItem },\n    });\n};\n\nexport const SetSelection = (selection) => (dispatch) => {\n    dispatch({\n        type: actions.SETSELECTION,\n        data: { selection },\n    });\n};\n\nexport default LoadData;\n","import React, { useEffect, useState } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\n\nimport Stack from 'react-bootstrap/Stack';\nimport Dropdown from 'react-bootstrap/Dropdown';\nimport ListGroup from 'react-bootstrap/ListGroup';\nimport Container from 'react-bootstrap/Container';\nimport Col from 'react-bootstrap/Col';\nimport Collapse from 'react-bootstrap/Collapse';\nimport Button from 'react-bootstrap/Button';\n\nimport LineChart from '../../components/LineChart/LineChart';\nimport LoadData, { SetSubItem, SetSelection } from '../../store/actions/data';\nimport './theme.css';\n\n/**\n * Renders the main dashboard\n * @component\n * @requires react\n * @returns {JSX}\n */\nconst Dashboard = () => {\n    /**\n     * The current data set being viewed\n     * @constant\n     * @type {{Object {name: string, amount: float}}}\n     */\n    const dataSet = useSelector((state) => state.data.workingDataSet);\n    /**\n     * The total amount for the data set being viewed\n     * @constant\n     * @type {float}\n     */\n    const totals = useSelector((state) => state.data.totals);\n    /**\n     * The specific cabinet, department, fund category or fund the user is looking at\n     * @constant\n     * @type {string}\n     */\n    const subItem = useSelector((state) => state.data.subItem);\n    /**\n     * The type of data the user is looking at ex. cabinet, department, fund category or fund\n     * @constant\n     * @type {string}\n     */\n    const selection = useSelector((state) => state.data.selection);\n    /**\n     * If the app is loading or not\n     * @constant\n     * @type {bool}\n     */\n    const isLoading = useSelector((state) => state.data.isLoading);\n\n    /**\n     * The width of the chart\n     * @constant\n     * @type {state}\n     */\n    const [chartWidth, setChartWidth] = useState(window.innerWidth * 0.75);\n\n    /**\n     * The height of the chart\n     * @constant\n     * @type {state}\n     */\n    const [chartHeight, setChartHeight] = useState(window.innerHeight * 0.75);\n\n    /**\n     * If the side panel is open or not\n     * @constant\n     * @type {state}\n     */\n    const [show, setShow] = useState(false);\n\n    /**\n     * The dispatch\n     * @constant\n     * @type {function}\n     */\n    const dispatch = useDispatch();\n\n    // Initial Data load\n    useEffect(() => { dispatch(LoadData()); }, []);\n    // Resize the chart on window resize\n    useEffect(() => {\n        const handleResize = () => {\n            setChartWidth(window.innerWidth * 0.75);\n            setChartHeight(window.innerHeight * 0.75);\n        };\n        window.addEventListener('resize', handleResize);\n        return () => window.removeEventListener('resize', handleResize);\n    });\n\n    if (isLoading) { return <h1>Loading!!!</h1>; }\n\n    const dimensions = {\n        width: chartWidth,\n        height: chartHeight,\n        margin: {\n            top: 60, right: 200, bottom: 10, left: 100,\n        },\n    };\n    const color = `#${Math.floor(Math.random() * 16777215).toString(16)}`;\n\n    /**\n     * The data the chart is displaying\n     * @constant\n     * @type {list}\n     */\n    const chartData = [];\n    for (let index = 0; index < 12; index++) {\n        // Pads 0 if less than 10, ex. 01, 02, 03\n        const day = index < 9 ? `0${index + 1}` : index + 1;\n        if (subItem === '') {\n            chartData.push({\n                value: dataSet[index + 1].total,\n                date: `2020-${day}-01`,\n            });\n        } else {\n            chartData.push({\n                value: dataSet[index + 1][subItem],\n                date: `2020-${day}-01`,\n            });\n        }\n    }\n\n    /**\n     * The sub items the chart can display\n     * @constant\n     * @type {list}\n     */\n    const subItemList = [];\n    Object.keys(totals).forEach((key) => {\n        subItemList.push(\n            <ListGroup.Item\n                action\n                active={subItem === key}\n                onClick={() => dispatch(SetSubItem(key))}\n            >\n                {key}\n            </ListGroup.Item>,\n        );\n    });\n\n    /**\n     * The side panel of options\n     * @constant\n     * @type {JSX}\n     */\n    const sidePanel = (\n        <div id='SidePanelID'>\n            <Stack gap={1} className='Stack'>\n                <Dropdown>\n                    <Dropdown.Toggle variant='dark' id='dropdown-basic'>\n                        {selection}\n                    </Dropdown.Toggle>\n                    <Dropdown.Menu variant='dark'>\n                        <Dropdown.Item onClick={() => dispatch(SetSelection('department'))}>\n                            Department\n                        </Dropdown.Item>\n                        <Dropdown.Item onClick={() => dispatch(SetSelection('cabinet'))}>\n                            Cabinet\n                        </Dropdown.Item>\n                        <Dropdown.Item onClick={() => dispatch(SetSelection('fund_category'))}>\n                            Fund Category\n                        </Dropdown.Item>\n                        <Dropdown.Item onClick={() => dispatch(SetSelection('fund'))}>\n                            Fund\n                        </Dropdown.Item>\n                    </Dropdown.Menu>\n                </Dropdown>\n                <ListGroup variant='dark' className='List'>{subItemList}</ListGroup>\n            </Stack>\n        </div>\n    );\n\n    return (\n        <Container fluid className='Main'>\n            <Col>\n                <div className='SidePanel d-grid gap-2'>\n                    <Button\n                        onClick={() => setShow(!show)}\n                        aria-controls='SidePanelID'\n                        bsPrefix='Button'\n                    >\n                        {show ? '<' : '>'}\n                    </Button>\n                    <Collapse in={show} dimension='width'>\n                        <div>\n                            {sidePanel}\n                        </div>\n                    </Collapse>\n                </div>\n            </Col>\n            <Col md='auto' className='LineChart'>\n                <LineChart data={{ name: 'test', color, items: chartData }} dimensions={dimensions} />\n            </Col>\n        </Container>\n    );\n};\n\nexport default Dashboard;\n","import React from 'react';\n\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nimport Dashboard from './containers/Dashboard/Dashboard';\nimport './App.css';\n\nfunction App() {\n    return (\n        <div className='App'>\n            <Dashboard />\n        </div>\n    );\n}\n\nexport default App;\n","const reportWebVitals = (onPerfEntry) => {\n    if (onPerfEntry && onPerfEntry instanceof Function) {\n        import('web-vitals').then(({\n            getCLS, getFID, getFCP, getLCP, getTTFB,\n        }) => {\n            getCLS(onPerfEntry);\n            getFID(onPerfEntry);\n            getFCP(onPerfEntry);\n            getLCP(onPerfEntry);\n            getTTFB(onPerfEntry);\n        });\n    }\n};\n\nexport default reportWebVitals;\n","/* eslint-disable camelcase */\n/* eslint-disable no-case-declarations */\nimport { DateTime } from 'luxon';\n\nimport * as actions from '../actions/actionTypes';\n\n/**\n * Initial state of the app\n * @prop {bool} isLoading: Is the loading data or not\n * @prop {string} fiscalYear: The year the user wants to see\n * @prop {object} departmentList: The list of departments and their money spent per month\n * @prop {object} departmentTotals: The list of departments and total money spent per year\n * @prop {object} cabinetList: The list of cabinets and their money spent per month\n * @prop {object} cabinetTotals: The list of cabinets and total money spent per year\n * @prop {object} fundCategoryList: The list of fund categories and their money spent per month\n * @prop {object} fundCategoryTotals: The list of fund categories and total money spent per year\n * @prop {object} fundList: The list of fund and their money spent per month\n * @prop {object} fundTotals: The list of fund and total money spent per year\n * @prop {string} selection: The category selection the user is viewing\n * @prop {string} subItem: The sub item the user wants to load into the line chart\n * @prop {object} workingDataSet: the current dataset being viewed\n * @prop {object} totals: The monthly totals for the data set currently being used\n * @prop {string} totalAmount: The total amount the colorado gov has spent\n */\nconst initialState = {\n    isLoading: true,\n    fiscalYear: DateTime.now().minus({ years: 1 }).toFormat('yyyy'),\n    departmentList: {},\n    departmentTotals: {},\n    cabinetList: {},\n    cabinetTotals: {},\n    fundCategoryList: {},\n    fundCategoryTotals: {},\n    fundList: {},\n    fundTotals: {},\n    selection: 'department',\n    subItem: 'total',\n    workingDataSet: null,\n    totals: null,\n    totalAmount: 0.0,\n};\n\n/**\n * Dispatches the needed action.\n * @param {object} state The current app state.\n * @param {action} action The action the app needs to dispatch.\n */\nconst dataReducer = (state = initialState, action) => {\n    switch (action.type) {\n    case actions.ISLOADING:\n        return {\n            ...state,\n            isLoading: action.isLoading,\n        };\n\n    case actions.DATE:\n        return {\n            ...state,\n            fiscalYear: action.fiscalYear,\n        };\n\n    case actions.LOADDATA:\n        const {\n            department_list, total_amount, grand_totals, cabinet_list, fund_list,\n            fund_category_list,\n        } = action.data;\n\n        return {\n            ...state,\n            totalAmount: total_amount,\n            departmentList: department_list,\n            departmentTotals: grand_totals.department,\n            cabinetList: cabinet_list,\n            cabinetTotals: grand_totals.cabinet,\n            fundCategoryList: fund_category_list,\n            fundCategoryTotals: grand_totals.fund_category,\n            fundList: fund_list,\n            fundTotals: grand_totals.fund,\n            isLoading: action.data.isLoading,\n            workingDataSet: department_list,\n            totals: grand_totals.department,\n        };\n\n    case actions.SETSUBITEM:\n        return {\n            ...state,\n            subItem: action.data.subItem,\n        };\n\n    case actions.SETSELECTION:\n        let workingDataSet = null;\n        let totals = null;\n\n        switch (action.data.selection) {\n        case 'department':\n            workingDataSet = state.departmentList;\n            totals = state.departmentTotals;\n            break;\n        case 'cabinet':\n            workingDataSet = state.cabinetList;\n            totals = state.cabinetTotals;\n            break;\n        case 'fund_category':\n            workingDataSet = state.fundCategoryList;\n            totals = state.fundCategoryTotals;\n            break;\n        case 'fund':\n            workingDataSet = state.fundList;\n            totals = state.fundTotals;\n            break;\n        default:\n            workingDataSet = state.departmentList;\n            totals = state.departmentTotals;\n        }\n        return {\n            ...state,\n            selection: action.data.selection,\n            subItem: 'total',\n            workingDataSet,\n            totals,\n        };\n\n    default:\n        return state;\n    }\n};\n\nexport default dataReducer;\n","import { combineReducers } from 'redux';\n\nimport data from './data';\n\nexport default combineReducers({ data });\n","import { createStore, applyMiddleware } from 'redux';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport thunk from 'redux-thunk';\n\nimport rootReducer from './store/reducers';\n\nconst middleware = [thunk];\nconst store = createStore(rootReducer, composeWithDevTools(applyMiddleware(...middleware)));\n\nexport default store;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\n\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport store from './store';\n\nimport './index.css';\n\nReactDOM.render(\n    <React.StrictMode>\n        <Provider store={store}><App /></Provider>\n    </React.StrictMode>,\n    document.getElementById('root'),\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals(console.log);\n"],"sourceRoot":""}